name: Deploy to abrah.ms

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Build binaries
      run: |
        # Build protocol service with static linking
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o atchess-protocol ./cmd/protocol
        
        # Build web service with static linking
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o atchess-web ./cmd/web
        
        # Make binaries executable
        chmod +x atchess-protocol atchess-web
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H -p ${{ secrets.DEPLOY_PORT || 22 }} ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST || 'abrah.ms' }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER || 'atchess-deploy' }}
        DEPLOY_PORT: ${{ secrets.DEPLOY_PORT || 22 }}
      run: |
        # Copy binaries
        scp -i ~/.ssh/deploy_key -P $DEPLOY_PORT \
          atchess-protocol atchess-web \
          $DEPLOY_USER@$DEPLOY_HOST:/tmp/
        
        # Skip wrapper script - not needed
        
        # Copy static files (without timestamps to avoid permission issues)
        tar czf static.tar.gz --mtime='@0' --owner=0 --group=0 -C web static
        scp -i ~/.ssh/deploy_key -P $DEPLOY_PORT \
          static.tar.gz \
          $DEPLOY_USER@$DEPLOY_HOST:/tmp/
        
        # Systemd service files are installed during initial setup only
        
        # Deploy and restart services
        ssh -i ~/.ssh/deploy_key -p $DEPLOY_PORT $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH'
          set -e
          
          # Stop services before updating binaries
          echo "Stopping services..."
          sudo systemctl stop atchess-protocol || true
          sudo systemctl stop atchess-web || true
          
          # Wait for services to fully stop
          sleep 2
          
          # Force remove old binaries if they exist (no sudo needed - we have write access)
          rm -f /srv/atchess/app/atchess-protocol /srv/atchess/app/atchess-web
          
          # Move new binaries to app directory
          cp /tmp/atchess-protocol /tmp/atchess-web /srv/atchess/app/
          chmod +x /srv/atchess/app/atchess-*
          
          # No wrapper script needed - environment is handled by systemd
          
          # Extract static files with proper ownership
          cd /srv/atchess/app
          rm -rf web/static
          mkdir -p web
          # Extract as atchess user to avoid permission issues
          tar xzf /tmp/static.tar.gz --no-same-owner
          # Fix ownership
          chown -R atchess:www web/static
          
          # Clean up temporary files
          rm -f /tmp/atchess-* /tmp/static.tar.gz
          
          # Systemd service files are managed by the setup script, not deployment
          
          # Restart services using sudo (allowed by sudoers)
          sudo systemctl daemon-reload
          sudo systemctl restart atchess-protocol
          sudo systemctl restart atchess-web
          
          # Check service status
          sleep 2
          sudo systemctl status atchess-protocol --no-pager || true
          sudo systemctl status atchess-web --no-pager || true
        ENDSSH
    
    - name: Verify deployment
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST || 'atchess.abrah.ms' }}
      run: |
        # Wait for services to start
        echo "Waiting for services to start..."
        sleep 10
        
        # Check health endpoints (fail on error)
        echo "Checking protocol service health..."
        if ! curl -f -s -o /dev/null -w "Health check status: %{http_code}\n" https://$DEPLOY_HOST/api/health; then
          echo "❌ Protocol service health check failed!"
          echo "Checking service status on server..."
          ssh -i ~/.ssh/deploy_key -p ${DEPLOY_PORT:-22} ${DEPLOY_USER:-atchess-deploy}@${DEPLOY_HOST:-abrah.ms} << 'ENDSSH'
            echo "=== Service Status ==="
            sudo systemctl status atchess-protocol --no-pager || true
            sudo systemctl status atchess-web --no-pager || true
            echo ""
            echo "=== Recent Logs ==="
            sudo journalctl -u atchess-protocol -n 20 --no-pager || true
            echo ""
            sudo journalctl -u atchess-web -n 20 --no-pager || true
        ENDSSH
          exit 1
        fi
        
        echo "✅ Health check passed!"
        echo "ATChess is available at: https://$DEPLOY_HOST"
    
    - name: Clean up SSH
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key